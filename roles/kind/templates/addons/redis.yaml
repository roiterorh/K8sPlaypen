apiVersion: helm.cattle.io/v1
kind: HelmChart
metadata:
  name: redis
  namespace: kube-system
spec:
  repo: https://charts.bitnami.com/bitnami
  chart: redis
  targetNamespace: data
  valuesContent: |-
    global:
      redis:
        password: ""
    diagnosticMode:
      enabled: false
      ## @param diagnosticMode.command Command to override all containers in the deployment
      ##
      command:
        - sleep
      ## @param diagnosticMode.args Args to override all containers in the deployment
      ##
      args:
        - infinity

    image:
      debug: false
    architecture: standalone
    auth:
      enabled: false
    master:
      disableCommands: []
      persistence:
        enabled: false
    metrics:
      ## @param metrics.enabled Start a sidecar prometheus exporter to expose Redis&reg; metrics
      ##
      enabled: true
      ## Bitnami Redis&reg; Exporter image
      ## ref: https://hub.docker.com/r/bitnami/redis-exporter/tags/
      ## @param metrics.image.registry Redis&reg; Exporter image registry
      ## @param metrics.image.repository Redis&reg; Exporter image repository
      ## @param metrics.image.tag Redis&reg; Exporter image tag (immutable tags are recommended)
      ## @param metrics.image.digest Redis&reg; Exporter image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag
      ## @param metrics.image.pullPolicy Redis&reg; Exporter image pull policy
      ## @param metrics.image.pullSecrets Redis&reg; Exporter image pull secrets
      ##
      image:
        registry: docker.io
        repository: bitnami/redis-exporter
        tag: 1.45.0-debian-11-r26
        digest: ""
        pullPolicy: IfNotPresent
        ## Optionally specify an array of imagePullSecrets.
        ## Secrets must be manually created in the namespace.
        ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
        ## e.g:
        ## pullSecrets:
        ##   - myRegistryKeySecretName
        ##
        pullSecrets: []
      ## Configure extra options for Redis&reg; containers' liveness, readiness & startup probes
      ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
      ## @param metrics.startupProbe.enabled Enable startupProbe on Redis&reg; replicas nodes
      ## @param metrics.startupProbe.initialDelaySeconds Initial delay seconds for startupProbe
      ## @param metrics.startupProbe.periodSeconds Period seconds for startupProbe
      ## @param metrics.startupProbe.timeoutSeconds Timeout seconds for startupProbe
      ## @param metrics.startupProbe.failureThreshold Failure threshold for startupProbe
      ## @param metrics.startupProbe.successThreshold Success threshold for startupProbe
      ##
      startupProbe:
        enabled: false
        initialDelaySeconds: 10
        periodSeconds: 10
        timeoutSeconds: 5
        successThreshold: 1
        failureThreshold: 5
      ## @param metrics.livenessProbe.enabled Enable livenessProbe on Redis&reg; replicas nodes
      ## @param metrics.livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe
      ## @param metrics.livenessProbe.periodSeconds Period seconds for livenessProbe
      ## @param metrics.livenessProbe.timeoutSeconds Timeout seconds for livenessProbe
      ## @param metrics.livenessProbe.failureThreshold Failure threshold for livenessProbe
      ## @param metrics.livenessProbe.successThreshold Success threshold for livenessProbe
      ##
      livenessProbe:
        enabled: true
        initialDelaySeconds: 10
        periodSeconds: 10
        timeoutSeconds: 5
        successThreshold: 1
        failureThreshold: 5
      ## @param metrics.readinessProbe.enabled Enable readinessProbe on Redis&reg; replicas nodes
      ## @param metrics.readinessProbe.initialDelaySeconds Initial delay seconds for readinessProbe
      ## @param metrics.readinessProbe.periodSeconds Period seconds for readinessProbe
      ## @param metrics.readinessProbe.timeoutSeconds Timeout seconds for readinessProbe
      ## @param metrics.readinessProbe.failureThreshold Failure threshold for readinessProbe
      ## @param metrics.readinessProbe.successThreshold Success threshold for readinessProbe
      ##
      readinessProbe:
        enabled: true
        initialDelaySeconds: 5
        periodSeconds: 10
        timeoutSeconds: 1
        successThreshold: 1
        failureThreshold: 3
      ## @param metrics.customStartupProbe Custom startupProbe that overrides the default one
      ##
      customStartupProbe: {}
      ## @param metrics.customLivenessProbe Custom livenessProbe that overrides the default one
      ##
      customLivenessProbe: {}
      ## @param metrics.customReadinessProbe Custom readinessProbe that overrides the default one
      ##
      customReadinessProbe: {}
      ## @param metrics.command Override default metrics container init command (useful when using custom images)
      ##
      command: []
      ## @param metrics.redisTargetHost A way to specify an alternative Redis&reg; hostname
      ## Useful for certificate CN/SAN matching
      ##
      redisTargetHost: "localhost"
      ## @param metrics.extraArgs Extra arguments for Redis&reg; exporter, for example:
      ## e.g.:
      ## extraArgs:
      ##   check-keys: myKey,myOtherKey
      ##
      extraArgs: {}
      ## @param metrics.extraEnvVars Array with extra environment variables to add to Redis&reg; exporter
      ## e.g:
      ## extraEnvVars:
      ##   - name: FOO
      ##     value: "bar"
      ##
      extraEnvVars: []
      ## Configure Container Security Context
      ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
      ## @param metrics.containerSecurityContext.enabled Enabled Redis&reg; exporter containers' Security Context
      ## @param metrics.containerSecurityContext.runAsUser Set Redis&reg; exporter containers' Security Context runAsUser
      ##
      containerSecurityContext:
        enabled: true
        runAsUser: 1001
      ## @param metrics.extraVolumes Optionally specify extra list of additional volumes for the Redis&reg; metrics sidecar
      ##
      extraVolumes: []
      ## @param metrics.extraVolumeMounts Optionally specify extra list of additional volumeMounts for the Redis&reg; metrics sidecar
      ##
      extraVolumeMounts: []
      ## Redis&reg; exporter resource requests and limits
      ## ref: https://kubernetes.io/docs/user-guide/compute-resources/
      ## @param metrics.resources.limits The resources limits for the Redis&reg; exporter container
      ## @param metrics.resources.requests The requested resources for the Redis&reg; exporter container
      ##
      resources:
        limits: {}
        requests: {}
      ## @param metrics.podLabels Extra labels for Redis&reg; exporter pods
      ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
      ##
      podLabels: {}
      ## @param metrics.podAnnotations [object] Annotations for Redis&reg; exporter pods
      ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
      ##
      podAnnotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9121"
      ## Redis&reg; exporter service parameters
      ##
      service:
        ## @param metrics.service.type Redis&reg; exporter service type
        ##
        type: ClusterIP
        ## @param metrics.service.port Redis&reg; exporter service port
        ##
        port: 9121
        ## @param metrics.service.externalTrafficPolicy Redis&reg; exporter service external traffic policy
        ## ref: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip
        ##
        externalTrafficPolicy: Cluster
        ## @param metrics.service.extraPorts Extra ports to expose (normally used with the `sidecar` value)
        ##
        extraPorts: []
        ## @param metrics.service.loadBalancerIP Redis&reg; exporter service Load Balancer IP
        ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#internal-load-balancer
        ##
        loadBalancerIP: ""
        ## @param metrics.service.loadBalancerSourceRanges Redis&reg; exporter service Load Balancer sources
        ## https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/#restrict-access-for-loadbalancer-service
        ## e.g.
        ## loadBalancerSourceRanges:
        ##   - 10.10.10.0/24
        ##
        loadBalancerSourceRanges: []
        ## @param metrics.service.annotations Additional custom annotations for Redis&reg; exporter service
        ##
        annotations: {}
      ## Prometheus Service Monitor
      ## ref: https://github.com/coreos/prometheus-operator
      ##      https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#endpoint
      ##
      serviceMonitor:
        ## @param metrics.serviceMonitor.enabled Create ServiceMonitor resource(s) for scraping metrics using PrometheusOperator
        ##
        enabled: false
        ## @param metrics.serviceMonitor.namespace The namespace in which the ServiceMonitor will be created
        ##
        namespace: ""
        ## @param metrics.serviceMonitor.interval The interval at which metrics should be scraped
        ##
        interval: 30s
        ## @param metrics.serviceMonitor.scrapeTimeout The timeout after which the scrape is ended
        ##
        scrapeTimeout: ""
        ## @param metrics.serviceMonitor.relabellings Metrics RelabelConfigs to apply to samples before scraping.
        ##
        relabellings: []
        ## @param metrics.serviceMonitor.metricRelabelings Metrics RelabelConfigs to apply to samples before ingestion.
        ##
        metricRelabelings: []
        ## @param metrics.serviceMonitor.honorLabels Specify honorLabels parameter to add the scrape endpoint
        ##
        honorLabels: false
        ## @param metrics.serviceMonitor.additionalLabels Additional labels that can be used so ServiceMonitor resource(s) can be discovered by Prometheus
        ##
        additionalLabels: {}
        ## @param metrics.serviceMonitor.podTargetLabels Labels from the Kubernetes pod to be transferred to the created metrics
        ##
        podTargetLabels: []
      ## Custom PrometheusRule to be defined
      ## ref: https://github.com/coreos/prometheus-operator#customresourcedefinitions
      ##
