apiVersion: v1
kind: Service
metadata:
  name: redisinsight-service
  namespace: ui
spec:
  type: NodePort
  ports:
    - port: 80
      targetPort: 8001
  selector:
    app: redisinsight
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redisinsight
  namespace: ui
  labels:
    app: redisinsight
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redisinsight
  template:
    metadata:
      labels:
        app: redisinsight
    spec:
      containers:
        - name: redisinsight
          image: redislabs/redisinsight:1.7.0
          imagePullPolicy: IfNotPresent

          volumeMounts:
            - name: db
              mountPath: /db
          ports:
            - containerPort: 8001
              protocol: TCP
          readinessProbe:
            exec:
              command:
                - 'sh'
                - '-c'
                #hach that also creates the connection if it does not exist
                - "curl http://localhost:8001/api/instance/ | grep redis-master.databases.svc || curl -XPOST http://localhost:8001/api/instance/ -d '{\"name\": \"redis\",\"connectionType\": \"STANDALONE\",\"host\": \"redis-master.databases.svc\",\"port\": 6379}' -H 'Content-Type: application/json'"
            initialDelaySeconds: 5
            periodSeconds: 2
            timeoutSeconds: 1
            successThreshold: 3
            failureThreshold: 10    
      volumes:
        - name: db
          emptyDir: {}
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  namespace: ui
  name: redisinsight
  labels:
    name: redisinsight
spec:
  ingressClassName: {{ingress_controller }}
  rules:
    - host: redisinsight.{{ domain }}
      http:
        paths:
          - pathType: Prefix
            path: "/"
            backend:
              service:
                name: redisinsight-service
                port:
                  number: 80